webpackJsonp([1],{"7HKV":function(n,e){n.exports="<script>\n    // 一个VNode的实例对象包含了以下属性\n\n    export default class VNode {\n        tag: string; // 当前节点的标签名\n        data: VNodeData; // 当前节点的数据对象\n        children: VNode[]; // 子节点，数组，也是VNode类型\n        text: string; // 当前节点的文本，一般文本节点或注释节点会有该属性\n        elm: Node; // 当前虚拟节点对应的真实的dom节点\n        ns: string; // 节点的namespace\n        context: Vue; // 编译作用域\n        functionalContext:Vue; // 函数化组件的作用域\n        key: string | number; // 节点的key属性，用于作为节点的标识，有利于patch的优化\n        componentOptions: VNodeComponentOptions; // 创建组件实例时会用到的选项信息\n        componentInstance|child : Vue; // 当前节点对应的组件的实例\n        parent: VNode; // 组件的占位节点\n        raw: boolean; // 原始html\n        isStatic: boolean; // 静态节点的标识\n        isRootInsert: boolean; // 是否作为根节点插入，被transition包裹的节点，该属性的值为false\n        isComment: boolean; // 当前节点是否是注释节点\n        isCloned: boolean; // 当前节点是否为克隆节点\n        isOnce: boolean; // 当前节点是否有v-once指令\n    }\n<\/script>"},I7yI:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o={name:"vdom",render:function(n){return n("h"+this.level,{class:{foo:!0},attrs:{id:"foo"},on:{click:this.clickHandler}},this.$slots.default)},props:{level:{type:Number,required:!0}},methods:{clickHandler:function(){console.log("clickHandler")}},mounted:function(){}};var i=t("VU/8")(o,null,!1,function(n){t("yuDn")},"data-v-1556fab0",null).exports,s=(t("7+uW"),{render:function(){var n=this.$createElement,e=this._self._c||n;return e("div",[e("p",[this._v(this._s(this.count))]),this._v(" "),e("button",{on:{click:this.addOneHandle}},[this._v("计数器加1")])])},staticRenderFns:[]});var r=t("VU/8")({name:"VueBus",data:function(){return{count:0}},mounted:function(){var n=this;this.$bus.on("add",function(){n.count++})},methods:{addOneHandle:function(){this.$bus.emit("add")}}},s,!1,function(n){t("fRuH")},"data-v-7d2a1f4a",null).exports,a=t("7HKV"),l=t.n(a),d=t("NoiB"),c=t.n(d),m=t("au/B"),u=t.n(m),v=t("mwI1"),p=t.n(v),f=t("qIdt"),_=t.n(f),h=t("PJmL"),V=t.n(h),C=t("VChv"),D=t.n(C),y=t("l43V"),b=t.n(y),E={name:"vdom",data:function(){return{vnodeformatMD:l.a,createelementMD:c.a,vnodedemo1MD:u.a,vnodedemo2MD:p.a,vnodedemo3MD:_.a,vnodedemo4MD:V.a,vnodedemo5MD:D.a,vnodedemo6MD:b.a,list:[]}},methods:{showlist:function(){this.list=["数组项A","数组项B","数组项C"]},clickHandle:function(){}},mounted:function(){},components:{VDom:i,VBus:r}},M={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{attrs:{id:"vdom"}},[t("div",{staticClass:"bground"},[t("div",{staticClass:"title"},[n._v("Render函数")]),n._v(" "),t("div",{staticClass:"line"}),n._v(" "),t("div",{staticClass:"content"},[t("div"),n._v(" "),t("div",{staticClass:"code-title"},[n._v("### Virtual Dom 虚拟DOM")]),n._v(" "),t("div",[t("div",[n._v("DOM是文档对象模型(Document Object Model)的简写，在浏览器中我们可以通过js来操作DOM，但是这样的操作性能很差，于是Virtual Dom应运而生。Virtual Dom就是在js中模拟DOM对象树来优化DOM操作的一种技术或思路，其中Virtual Dom对象树的每个节点用VNode表示。当发生变化时，就对同级VNode进行Diff算法，最终通过Rander函数渲染VNode节点组成的对象树实现DOM操作。")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodeformatMD))])])])]),n._v(" "),t("br"),n._v(" "),t("div",{staticClass:"code-title"},[n._v("### Render函数中createElement创建VNode节点")]),n._v(" "),t("div",[t("div",[n._v("Render函数通过createElement参数来创建Virtual Dom对象树，createElement构成了Vue Virtual Dom的模板，它有3个参数：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.createelementMD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("下面是一些由浅至深的用渲染创建组件的简单例子，当使用手脚架框架通过.vue文件引入渲染实现的组件时，则去掉模板中template标签即可")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo1MD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("渲染多个相同的子节点：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo2MD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("通过渲染实现v-if、v-else和v-for循环：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo3MD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("v-model语法糖渲染实现：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo4MD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("多个组件中根据参数动态选择组件：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo5MD))])])]),n._v(" "),t("div",{staticClass:"top"},[n._v("jsx写法：")]),n._v(" "),t("div",{staticClass:"md"},[t("pre",[t("code",[n._v(n._s(n.vnodedemo6MD))])])])])])])])},staticRenderFns:[]};var g=t("VU/8")(E,M,!1,function(n){t("pHHJ")},"data-v-2ab520c2",null);e.default=g.exports},NoiB:function(n,e){n.exports="<script>\n    createElement {\n        // {String | Object | Function}        \n        // 一个HTML标签，组件选项，或一个函数\n        // 必须Return 上述其中一个\n        'div'，\n        // {Object}\n        // 一个对应属性的数据对象，可选\n        {\n            // 和`v-bind:class`一样的 API\n            'class': {\n                foo: true,\n                bar: false\n            },\n            // 和`v-bind:style`一样的 API\n            style: {\n                color: 'red',\n                fontSize: '14px'\n            },\n            // 正常的 HTML 特性\n            attrs: {\n                id: 'foo'\n            },\n            // 该节点为子节点时传递参数 props\n            props: {\n                myProp: 'bar'\n            },\n            // DOM 属性\n            domProps: {\n                innerHTML: 'baz'\n            },\n            // 事件监听器基于 \"on\"\n            // 所以不再支持如 v-on:keyup.enter 修饰器\n            // 需要手动匹配 keyCode。\n            on: {\n                click: this.clickHandler\n            },\n            // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。\n            nativeOn: {\n                click: this.nativeClickHandler\n            },\n            // 自定义指令. 注意事项：不能对绑定的旧值设值\n            // Vue 会为您持续追踨\n            directives: [{\n                name: 'my-custom-directive',\n                value: '2'\n                expression: '1 + 1',\n                arg: 'foo',\n                modifiers: {\n                    bar: true\n                }\n            }],\n            // 如果子组件有定义 slot 的名称\n            slot: 'name-of-slot'\n            // 其他特殊顶层属性\n            key: 'myKey',\n            ref: 'myRef'\n        },\n        // {String | Array}\n        // 子节点VNode，可选\n        [\n            createElement('h1', 'hello world'),\n            createElement(MyCompont, {\n                props:{\n                    id: 'myid'\n                }\n            }),\n            'text'\n        ]\n    }\n<\/script>"},PJmL:function(n,e){n.exports="<template>\n    <ele-model></ele-model>\n</template>\n\n<script>\n    Vue.component('ele-model', {\n        render: function(createElement) {\n            var _this = this;\n            return createElement('div', [\n                createElement('input', {\n                    domProps: {\n                        value: this.value\n                    },\n                    on: {\n                        input: function(e) {\n                            _this.value = e.target.value;\n                        }\n                    }\n                }),\n                createElement('p', 'value:' + this.value)\n            ]);\n        },\n        data: function() {\n            return {\n                value: ''\n            }\n        }\n    });\n<\/script>"},VChv:function(n,e){n.exports="<template>\n    <smart-item type='img' data='imgtype组件'></smart-item>\n</template>\n\n<script>\n    Vue.component('img-item', {\n        render: function(createElement) {\n            return createElement('p', this.data);\n        },\n        props: {\n            data: {\n                type: String,\n                default: '图片组件'\n            }\n        }\n    });\n\n    Vue.component('video-item', {\n        render: function(createElement) {\n            return createElement('p', this.data);\n        },\n        props: {\n            data: {\n                type: String,\n                default: '视频组件'\n            }\n        }\n    });\n\n    Vue.component('smart-item', {\n        render: function(createElement) {\n            var _this = this;\n\n            function getComponent() {\n                if(_this.type == 'img') {\n                    return 'img-item';\n                } else {\n                    return 'video-item';\n                }\n            }\n            return createElement(getComponent(), {\n                props: {\n                    data: _this.$props.data\n                }\n            }, this.$slots.default);\n        },\n        props: {\n            type: {\n                type: String\n            },\n            data: {\n                type: String\n            }\n        }\n    });\n<\/script>"},"au/B":function(n,e){n.exports="<template>\n    <v-dom :level=\"6\">hello</v-dom>\n</template>\n\n<script>\n    Vue.component('v-dom', {\n        render: function(createElement) {\n            return createElement(\n                'h' + this.level, // tag name 标签名称\n                this.$slots.default // 子组件中的阵列\n            )\n        },\n        props: {\n            level: {\n                type: Number,\n                required: true\n            }\n        }\n    })\n<\/script>"},fRuH:function(n,e){},l43V:function(n,e){n.exports="<template>\n    <jsx-item></jsx-item>\n</template>\n\n<script>\n    Vue.component('jsx-item', {\n        render: function(h) {\n            return(\n                <div>\n                    <ul>\n                        <li>jsx.1</li>\n                        <li>jsx.2</li>\n                    </ul>\n                </div>\n            )\n        }\n    });\n<\/script>"},mwI1:function(n,e){n.exports="<template>\n    <ele></ele>\n</template>\n\n<script>\n    Vue.component('ele', {\n        render: function(createElement) {\n            var ChildNode = createElement('p', 'hello');\n            // 设置子节点有多个相同的元素，方法1\n            return createElement('div', [ChildNode, ChildNode]);\n\n            // 设置子节点有多个相同的元素，方法2，推荐用这种\n            return createElement('div',\n                Array.apply(null, {\n                    length: 5\n                }).map(function() {\n                    return createElement('p', 'hello');\n                })\n            );\n        }\n    });\n<\/script>"},pHHJ:function(n,e){},qIdt:function(n,e){n.exports="<template>\n    <ele-list :list=\"list\"></ele-list>\n    <button @click=\"showlist\">显示列表</button>\n</template>\n\n<script>\n    Vue.component('ele-list', {\n        render: function(createElement) {\n            if(this.list.length) {\n                return createElement('ul', this.list.map(function(item) {\n                    return createElement('li', item);\n                }));\n            } else {\n                return createElement('p', '列表为空');\n            }\n        },\n        props: {\n            list: {\n                type: Array,\n                default: function() {\n                    return [];\n                }\n            }\n        }\n    });\n\n    export default {\n        data() {\n            return {\n                list: []\n            }\n        },\n        methods: {\n            showlist: function() {\n                this.list = ['数组项A', '数组项B', '数组项C'];\n            }\n        }\n    }\n<\/script>"},yuDn:function(n,e){}});
//# sourceMappingURL=1.a8afc5b1552c854bd9c5.js.map