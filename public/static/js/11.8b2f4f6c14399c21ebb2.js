webpackJsonp([11],{H0Yu:function(t,e){},PlOe:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"tokencheck"}},[n("div",{staticClass:"bground"},[n("div",{staticClass:"title"},[t._v("axios配置与token验证")]),t._v(" "),n("div",{staticClass:"line"}),t._v(" "),n("div",{staticClass:"content"},[n("div",[t._v("token验证，是指应用于检测用户打开某页面时是否已经登录或是否有权限打开的验证服务。当token验证失败时，返回登录界面或提示相应语句。获取token值后一般存储在本地缓存中，有一定的时效性，每次向服务端请求数据时，会配置在请求链接的Headers中，通过请求拦截添加，相关代码封装在root/src/assets/js/middleware.js。初始token可在登录时从服务端获取，通过store.commit('API_TOKEN', apiToken)存储至vuex的app.apiToken状态中")]),t._v(" "),n("div",{staticClass:"code-title"},[t._v("axios配置：")]),t._v(" "),n("div",{staticClass:"md"},[n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[n("code",{staticClass:"javascript"},[t._v("// middleware.js\nexport const SetAxiosConfig = function(router, store) {\n\tVue.prototype.$http = axios;\n\tlet _prefix = '';\n\n\tif(process.env.NODE_ENV == 'production') {\n\t\t_prefix = `${process.env.HOST}/api`\n\t} else {\n\t\t_prefix = '/api'\n\t}\n\n\taxios.defaults.baseURL = _prefix;\n\n\t// 请求拦截，在请求头部加入token\n\taxios.interceptors.request.use(\n\t\tfunction(config) {\n\t\t\tlet apiToken = '';\n\t\t\ttry {\n\t\t\t\t// .app.apiToken状态值配置于vuex/modules/app\n\t\t\t\tlet token = store.state.app.apiToken; \n\t\t\t\tif(token) {\n\t\t\t\t\tapiToken = token;\n\t\t\t\t} else if(getLocalStorage('api_token')) {\n\t\t\t\t\tapiToken = getLocalStorage('api_token');\n\t\t\t\t\tstore.commit('API_TOKEN', apiToken);\n\t\t\t\t}\n\t\t\t} catch(e) {\n\t\t\t\tthrow new Error(e.toString());\n\t\t\t}\n\t\t\tif(apiToken) {\n\t\t\t\t//  存在将api_token写入请求头部\"API-TOKEN\"中，该值可根据前后端协商制定\n\t\t\t\tconfig.headers['API-TOKEN'] = `${apiToken}`; \n\t\t\t}\n\t\t\treturn config;\n\t\t},\n\t\tfunction(error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t);\n\n\t// 接收请求拦截\n\taxios.interceptors.response.use(function(response) {\n\t\treturn response;\n\t}, function(error) {\n\t\tif(error.response) {\n\t\t\tswitch(error.response.status) {\n\t\t\t\tcase 404:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Promise.reject(error.response.data)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}\n\n// main.js\nimport {SetAxiosConfig} from '@/assets/js/middleware';\nimport router from './router';\nimport store from './vuex/store';\n\nSetAxiosConfig(router, store);")])])]),t._v(" "),n("div",{staticClass:"md"},[n("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[n("code",{staticClass:"javascript"},[t._v("// 路由访问拦截，验证token\nexport const SetRouterTransition = function(router, store) {\n\t// 页面跳转前 \n\trouter.beforeEach((to, from, next) => {\n\t\t// meta.needToken为路由中配置的项，决定该页面是否需要验证\n\t\tif(to.meta.needToken) {\n\t\t\tif(store.state.app.apiToken || getLocalStorage('api_token')) {\n\t\t\t\tnext();\n\t\t\t} else {\n\t\t\t\t// 若无token值直接返回首页\n\t\t\t\tnext({\n\t\t\t\t\tpath: '/',\n\t\t\t\t\tquery: {\n\t\t\t\t\t\tredirect: to.fullPath\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\tnext();\n\t\t}\n\t});\n\n\t// 页面跳转后\n\trouter.afterEach((transition) => {\n\t\tlet title = transition.name;\n\t\tdocument.title = title;\n\t});\n}\n\t\t\t\t\t\n// main.js\nimport {SetRouterTransition} from '@/assets/js/middleware';\nimport router from './router';\nimport store from './vuex/store';\n\nSetRouterTransition(router, store);")])])])])])])},staticRenderFns:[]};var r=n("VU/8")({name:"tokencheck"},o,!1,function(t){n("H0Yu")},"data-v-5b806bb9",null);e.default=r.exports}});
//# sourceMappingURL=11.8b2f4f6c14399c21ebb2.js.map