webpackJsonp([11],{PlOe:function(t,r,e){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n={render:function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{attrs:{id:"tokencheck"}},[e("div",{staticClass:"bground"},[e("div",{staticClass:"title"},[t._v("axios配置与token验证")]),t._v(" "),e("div",{staticClass:"line"}),t._v(" "),e("div",{staticClass:"content"},[e("div",[t._v("token验证，是指应用于检测用户打开某页面时是否已经登录或是否有权限打开的验证服务。当token验证失败时，返回登录界面或提示相应语句。获取token值后一般存储在本地缓存中，有一定的时效性，每次向服务端请求数据时，会配置在请求链接的Headers中，通过请求拦截添加，相关代码封装在框架的src/assets/js/middleware.js文件中。初始token可在登录时从服务端获取，通过store.commit('TOKEN', token)存储状态。")]),t._v(" "),e("div",{staticClass:"code-title"},[t._v("axios配置核心代码：在网络请求时进行token验证")]),t._v(" "),e("div",{staticClass:"md"},[e("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e("code",{staticClass:"javascript"},[t._v("// middleware.js\r\nexport const SetAxiosConfig = function(router, store) {\r\n\tVue.prototype.$http = axios;\r\n\tlet _prefix = '';\r\n\r\n\tif(process.env.NODE_ENV == 'production') {\r\n\t\t_prefix = `${process.env.HOST}/api`\r\n\t} else {\r\n\t\t_prefix = '/api'\r\n\t}\r\n\r\n\taxios.defaults.baseURL = _prefix;\r\n\r\n\t// 请求拦截，在头部加入token\r\n\taxios.interceptors.request.use(\r\n\t\tfunction(config) {\r\n\t\t\tlet token = '';\r\n\t\t\ttoken = store.state.app.token;\r\n\t\t\tif(token) {\r\n\t\t\t\ttoken = token;\r\n\t\t\t} else if(getLocalStorage('token')) {\r\n\t\t\t\ttoken = getLocalStorage('token');\r\n\t\t\t\tstore.commit('TOKEN', token);\r\n\t\t\t}\r\n\t\t\tif(token) {\r\n\t\t\t\t// 存在将token写入请求头部\"TOKEN\"\r\n\t\t\t\tconfig.headers['TOKEN'] = `${token}`;\r\n\t\t\t}\r\n\t\t\treturn config;\r\n\t\t},\r\n\t\tfunction(error) {\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t);\r\n\r\n\t// 请求结果\r\n\taxios.interceptors.response.use(function(response) {\r\n\t\treturn response;\r\n\t}, function(error) {\r\n\t\tif(error.response) {\r\n\t\t\tswitch(error.response.state) {\r\n\t\t\t\tcase 411:\r\n\t\t\t\t\t// 如411错误为没有token值\r\n\t\t\t\t\t// 返回处理状态和信息的Promise对象\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 412:\r\n\t\t\t\t\t// 如412错误为入参不正确\r\n\t\t\t\t\t// 返回处理状态和信息的Promise对象\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn Promise.reject(error.response.data)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// main.js\r\nimport {SetAxiosConfig} from '@/assets/js/middleware';\r\nimport router from './router';\r\nimport store from './vuex/store';\r\n\r\nSetAxiosConfig(router, store);\r\n\r\nlet path = \"http://127.0.0.1/api/mockGetJson\"; // 访问json-server模拟接口\r\naxios.get(path).then(function(resp) {\r\n\tconsole.log(resp);\r\n}).catch(error => {\r\n\tconsole.log(error);\r\n});")])])]),t._v(" "),e("div",{staticClass:"code-title"},[t._v("router配置核心代码：在路由跳转时进行token验证")]),t._v(" "),e("div",{staticClass:"md"},[e("pre",{directives:[{name:"highlightjs",rawName:"v-highlightjs"}]},[e("code",{staticClass:"javascript"},[t._v("// Router配置：路由跳转时token验证\r\nexport const SetRouterTransition = function(router, store) {\r\n\t/* router before */\r\n\trouter.beforeEach((to, from, next) => {\r\n\t\t// check this router need auth\r\n\t\tif(to.meta.requireAuth) {\r\n\t\t\tif(store.state.app.token || getLocalStorage('api_token')) {\r\n\t\t\t\tnext();\r\n\t\t\t} else {\r\n\t\t\t\tnext({\r\n\t\t\t\t\tpath: '/',\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tredirect: to.fullPath\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tnext();\r\n\t\t}\r\n\t});\r\n\r\n\t/* router after */\r\n\trouter.afterEach((transition) => {\r\n\t\tlet title = transition.name;\r\n\t\tdocument.title = title;\r\n\t});\r\n}\r\n\t\t\t\t\t\r\n// main.js\r\nimport {SetRouterTransition} from '@/assets/js/middleware';\r\nimport router from './router';\r\nimport store from './vuex/store';\r\n\r\nSetRouterTransition(router, store);")])])])])])])},staticRenderFns:[]};var o=e("C7Lr")({name:"tokencheck"},n,!1,function(t){e("lW70")},"data-v-c0d58934",null);r.default=o.exports},lW70:function(t,r){}});
//# sourceMappingURL=11.33d6f434434c36c9b381.js.map